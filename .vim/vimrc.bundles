if &compatible
  set nocompatible
end

call plug#begin('~/.vim/bundle')

" Colorscheme
Plug 'Rigellute/rigel'

" Define bundles via Github repos
Plug 'christoomey/vim-run-interactive'

" If fzf has already been installed via Homebrew, use the existing fzf
" Otherwise, install fzf. The `--all` flag makes fzf accessible outside of vim
if isdirectory("/usr/local/opt/fzf")
  Plug '/usr/local/opt/fzf'
else
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
endif

" General Vim Helpers
Plug 'junegunn/fzf.vim' " 'nuf said
Plug 'pbrisbin/vim-mkdir' " Make a file that doesn't exist
Plug 'tpope/vim-eunuch' " File Helpers
Plug 'janko-m/vim-test' " Self-explanatory
Plug 'tpope/vim-fugitive' " Git Helpers
Plug 'tpope/vim-surround' " Help with quotes, parens, etc.
Plug 'vim-scripts/tComment' " Comment toggler, etc.
Plug 'prettier/vim-prettier',  { 
      \ 'do': 'yarn install',
      \ 'for': ['javascript', 'typescript', 'css', 'scss', 'json', 'graphql', 'markdown', 'html'] }

Plug 'ap/vim-css-color' " to see colors in CSS files

" Ruby/Rails Helpers
Plug 'tpope/vim-bundler' 
Plug 'tpope/vim-endwise' 
Plug 'tpope/vim-rails'
Plug 'tpope/vim-rake'
Plug 'vim-ruby/vim-ruby'

" Language plugins
" JS/TS/React
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'lepture/vim-jinja'

" Vue
Plug 'posva/vim-vue'

" Elm
Plug 'elmcast/elm-vim'

" Scala
Plug 'derekwyatt/vim-scala'

" Misc.
Plug 'sheerun/vim-polyglot'
Plug 'jparise/vim-graphql'

" Styling/Workspace Plugins
Plug 'itchyny/lightline.vim'
Plug 'mhinz/vim-startify'

" CoC Installations
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'dsznajder/vscode-es7-javascript-react-snippets', { 'do': 'yarn install --frozen-lockfile && yarn compile' }

call plug#end()
